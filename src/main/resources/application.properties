# ===============================
# Spring 기본 설정
# ===============================
spring.application.name=routy-back
# ===============================
# Oracle Database 연결 설정
# ===============================
# Oracle JDBC 드라이버 설정
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
# DB 연결 URL
# - routydb_high : 오라클 클라우드 자동 생성된 DB 서비스 이름
# - TNS_ADMIN : Wallet 경로 (상대경로로 지정 → 루트 기준 ./Wallet_ROUTYDB)
#  배포 환경에서는 ./Wallet_ROUTYDB 경로를 GitHub Secret으로 지정하는 게 안전함
spring.datasource.url=${SPRING_DATASOURCE_URL}
# DB 계정 정보 (보안상 직접 작성 금지 → .env 또는 GitHub Secrets에서 주입)
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
# ===============================
# ⚙️ JPA 설정
# ===============================
# DDL 자동 처리 방식
# none / validate / update / create / create-drop
spring.jpa.hibernate.ddl-auto=update
# SQL 로그 출력 여부
spring.jpa.show-sql=true
# SQL 포맷 정렬 (읽기 쉽게)
spring.jpa.properties.hibernate.format_sql=true
# Oracle 전용 Dialect (JPA가 Oracle 문법 인식)
spring.jpa.database-platform=org.hibernate.dialect.OracleDialect
# ===============================
# 환경변수 (.env) 로드 설정
# ===============================
# .env 파일에서 환경 변수를 읽어옴
spring.config.import=optional:file:.env[.properties]
# ===============================
# CORS 설정 (React 통신 허용)
# ===============================
# 프론트엔드가 localhost:3000에서 요청할 때 허용
spring.web.cors.allowed-origins=http://localhost:3000
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true